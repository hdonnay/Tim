#!/bin/sh

# Copyright (c) 2012, Göran Gustafsson, Hank Donnay. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  Redistributions of source code must retain the above copyright notice, this
#  list of conditions and the following disclaimer.
#
#  Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

###############################################################################
# Web: https://github.com/hdonnay/Tim                                         #
# Git: git://github.com/hdonnay/Tim.git                                       #
###############################################################################

VERSION="2.1.0"
FILENAME="$0" # Get the current filename of the script.
DIRECTORY="$(dirname `which $0`)" # Get the path of the directory the script is in.

# set up trap to avoid homebrew exit handling
trap "printf \"\033[31mCommand not found.\033[0m\n\" && exit 31" SYS
trap "printf \"\033[31mConfiguration file error.\033[0m\n\" && exit 29" IO
trap "printf \"\033[31mInvalid configuration value.\033[0m\n\" && exit 10" USR1
trap "printf \"\033[31mInterrupt caught, exiting.\033[0m\n\" ; if [ \$! ]; then kill -s INT \$!; fi; exit 2" INT
trap "kill -s INT \$!; time_left; wait \$?" QUIT
#trap "printf \"Can't find the default audio files!\n\" && kill -TERM $$" SIGQUIT
#trap "printf \"Can't find the default audio files!\n\" && exit 0" SIGTERM

TIMER_CMD=
WORK_CMD=
BREAK_CMD=
POMODORO_CMD=
TIMER_REPEAT_CMD=0
POMODORO_REPEAT_CMD=0
INTERVAL=15
POMODORO_WORK=25
POMODORO_BREAK=5
POMODORO_STOP=4

###############################################################################
# CONFIGURATION SECTION                                                       #
###############################################################################
[ -f "${HOME}/.timrc" ] && . ${HOME}/.timrc # Lazy fix. This is probably temporary.

if which aplay > /dev/null; then
    DEFAULT_CMD="$(which aplay) -q" # Comes with alsa-utils.
elif which mplayer > /dev/null; then
    DEFAULT_CMD="$(which mplayer) -q" # the linux media player
elif which afplay > /dev/null; then
    DEFAULT_CMD="$(which afplay)" # Comes with Mac OS X.
else
    DEFAULT_CMD="echo I would be playing"
fi


# If these variables are not found in ~/.timrc then set them. Tim checks for
# audio files in this order: 1. ~/.timrc, 2. ~/.tim folder and 3. script $PWD.
if [ -z "$TIMER_CMD" ]; then
    if [ -f "${HOME}/.tim/alarm.wav" ]; then
        TIMER_CMD="$DEFAULT_CMD ${HOME}/.tim/alarm.wav"
    elif [ -f "$DIRECTORY/audio_files/alarm.wav" ]; then
        TIMER_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/alarm.wav"
    else
        kill -s IO $$
    fi
fi

if [ -z "$WORK_CMD" ]; then
    if [ -f ~/.tim/work.wav ]; then
        WORK_CMD="$DEFAULT_CMD ~/.tim/work.wav"
    elif [ -f "$DIRECTORY/audio_files/work.wav" ]; then
        WORK_CMD="$DEFAULT_CMD $DIRECTORY/audio_files/work.wav"
    else
        kill -s IO $$
    fi
fi

if [ -z "$BREAK_CMD" ]; then
    if [ -f "${HOME}/.tim/break.wav" ]; then
        BREAK_CMD="$DEFAULT_CMD ~/.tim/break.wav"
    elif [ -f "${DIRECTORY}/audio_files/break.wav" ]; then
        BREAK_CMD="$DEFAULT_CMD ${DIRECTORY}/audio_files/break.wav"
    else
        kill -s IO $$
    fi
fi

if [ -z "$POMODORO_CMD" ]; then
    if [ -f "${HOME}/.tim/alarm.wav" ]; then
        POMODORO_CMD="$DEFAULT_CMD ~/.tim/alarm.wav"
    elif [ -f "${DIRECTORY}/audio_files/alarm.wav" ]; then
        POMODORO_CMD="$DEFAULT_CMD ${DIRECTORY}/audio_files/alarm.wav"
    else
        kill -s IO $$
    fi
fi


###############################################################################
# VALIDATE SETTINGS SECTION                                                   #
###############################################################################
validate_settings() {
    for i in "$TIMER_CMD" "$WORK_CMD" "$BREAK_CMD" "$POMODORO_CMD"; do
        if [ ! -x $(which `echo "$i" | cut -d ' ' -f 1`) ]; then
            kill -s SYS $$
        fi
    done

    for i in "$TIMER_REPEAT_CMD" "$POMODORO_REPEAT_CMD"; do
        echo "$i" | grep -E '[01]' > /dev/null 2>&1 || kill -s USR1 $$
    done

    for i in "$INTERVAL" "$POMODORO_WORK" "$POMODORO_BREAK" "$POMODORO_STOP"; do
        echo "$i" | grep -E '[[:digit:]]+' > /dev/null 2>&1 || kill -s USR1 $$
    done
}

time_left() {
    # Not strictly portable, but only needs to be consistent.
    NOW=$(date +%s)
    delta=$(expr `printf %d "$TIME_END"` - $NOW)
    printf "\033[33m$(printf %02d `expr $delta / 60`)\033[0m:\033[33m$(printf %02d `expr $delta % 60`)\033[0m left...\n"
    sleep $delta &
    return $!
}

###############################################################################
# INFORMATION SECTION                                                         #
###############################################################################
usage() {
    cat << EOF
Usage: $FILENAME [OPTION]... [NUMBER]...
Try '--help' for more information."
EOF
}

help() {
    cat << EOF
Usage: $FILENAME [OPTION]... [NUMBER]...

    [NUMBER]      Wait [NUMBER] minutes before starting alarm.
    i [NUMBER]    Work [NUMBER] minutes and pause [NUMBER] minutes.
                      (Default: 15 minutes work and pause.)
    r [NUMBER]    Reverse. Start with break instead of work.
    p             Work X minutes and pause X minutes. Run X times.
                      (Default: 25 minutes work, 5 minutes break and
                      stop after 4 times.)
                      <http://en.wikipedia.org/wiki/Pomodoro_Technique>
    d             Display value of all variables and exit.
    h             Display this help and exit.
    v             Output version information and exit.

Examples:

    $FILENAME 5        # Wait 5 minutes before starting alarm.
    $FILENAME i 10    # Work for 10 minutes and pause for 10 minutes.
    $FILENAME i       # Same as above but use the timrc (or default) setting.
    $FILENAME p       # Pomodoro mode. Using timrc (or default) settings.

Configuration:

    Read the file timrc.example for more information.

EOF
}

version() {
    cat << EOF
Tim (Timer Script) $VERSION

Web: https://github.com/hdonnay/Tim
Git: git://github.com/hdonnay/Tim.git

Written by Göran Gustafsson <gustafsson.g@gmail.com>, Hank Donnay.
Released under the BSD 2-Clause license."
EOF
}


###############################################################################
# TIMER MODE SECTION                                                          #
###############################################################################
timer() {
    validate_settings
    MINUTES_IN_SECONDS=$(echo "$1 * 60" | bc) # Convert minutes to seconds.
    TIME_END=$(expr `date +%s` + $MINUTES_IN_SECONDS)

    printf "Starting timer. Waiting for $1 minute(s).\n"
    printf "Stop with Ctrl+C. Time remaining with Ctrl+\.\n"

    sleep "$MINUTES_IN_SECONDS" &
    wait $!
    printf "\n\033[31mALARM SET OFF!\033[0m\n"

    if [ "$TIMER_REPEAT_CMD" -eq 1 ]; then
        while 1; do
            eval $TIMER_CMD
        done
    else
        eval $TIMER_CMD
    fi
}


###############################################################################
# INTERVAL MODE SECTION                                                       #
###############################################################################
interval() {
    validate_settings
    if [ $1 = "reverse" ]; then
        SPECIFIC_TIME=$2
    else
        SPECIFIC_TIME=$1
    fi

    if [ -z "$SPECIFIC_TIME" ]; then
        MINUTES=$INTERVAL
    else
        MINUTES=$SPECIFIC_TIME
    fi
    MINUTES_IN_SECONDS=$(echo "$MINUTES * 60" | bc)

    if [ $1 = "reverse" ]; then
        CURRENT_MODE="break"
    else
        CURRENT_MODE="work"
    fi

    printf "Starting timer. Interval of $MINUTES minute(s).\n"
    printf "Start "
    if [ $CURRENT_MODE = "work" ]; then
        printf "working "
    else
        printf "break "
    fi
    printf "\033[32mnow\033[0m.\nStop with Ctrl+C. Time remaining with Ctrl+\.\n"

    while true; do
        TIME_END=$(expr `date +%s` + $MINUTES_IN_SECONDS)
        sleep "$MINUTES_IN_SECONDS" &
        wait $!

        if [ $CURRENT_MODE = "work" ]; then
            printf "\033[32mTAKE A LITTLE BREAK!\033[0m\n"
            eval $BREAK_CMD &

            CURRENT_MODE="break"
        else
            printf "\033[31mSTART WORKING NOW!\033[0m\n"
            eval $WORK_CMD &

            CURRENT_MODE="work"
        fi
    done
}


###############################################################################
# POMODORO MODE SECTION                                                       #
###############################################################################
pomodoro() {
    validate_settings
    # Convert minutes to seconds.
    POMODORO_WORK_IN_SECONDS=$(echo "$POMODORO_WORK  * 60" | bc)
    POMODORO_BREAK_IN_SECONDS=$(echo "$POMODORO_BREAK * 60" | bc )

    CURRENT_MODE="work"
    CURRENT_RUN=1
    MINUTES_IN_SECONDS=$POMODORO_WORK_IN_SECONDS

    printf "Starting timer. \033[33mPomodoro\033[0m mode:\n"
    printf "\tWork $POMODORO_WORK min. Break $POMODORO_BREAK min. Stop after $POMODORO_STOP.\n"
    printf "Start working \033[32mnow\033[0m.\nStop with Ctrl+C. Time remaining with Ctrl+\.\n"

    while [ $CURRENT_RUN -lt $POMODORO_STOP ]; do
        TIME_END=$(expr `date +%s` + $MINUTES_IN_SECONDS)
        sleep "$MINUTES_IN_SECONDS" &
        wait $!

        if [ "$CURRENT_MODE" = "work" ]; then
            printf "\033[32mTAKE A LITTLE BREAK!\033[0m\n"
            eval "$BREAK_CMD &"

            CURRENT_MODE="break"
            MINUTES_IN_SECONDS=$POMODORO_BREAK_IN_SECONDS
        else
            printf "\033[31mSTART WORKING NOW!\033[0m\nPress return when ready...\n"
            eval "$WORK_CMD &"
            read WAIT_FOR_INPUT

            CURRENT_MODE=work
            MINUTES_IN_SECONDS=$POMODORO_WORK_IN_SECONDS

            # Increment CURRENT_RUN so we can stop pomodoro mode at POMODORO_STOP.
            CURRENT_RUN=$(echo "$CURRENT_RUN + 1" | bc)
        fi
    done

    TIME_END=$(expr `date +%s` + $MINUTES_IN_SECONDS)
    sleep "$MINUTES_IN_SECONDS" &
    wait $!

    printf "\nWorking session is over!\n"

    if [ $POMODORO_REPEAT_CMD -eq 1 ]; then
        while true; do
            eval $POMODORO_CMD # Execute POMODORO_CMD and loop until terminating.
        done
    else
        eval $POMODORO_CMD # Execute POMODORO_CMD.
    fi
}

###############################################################################
# OPTIONS AND EXECUTION SECTION                                               #
###############################################################################
case $# in
    0)  usage
        exit 0
        ;;
    1)
        if echo "$1" | grep -E '[[:digit:]]+' > /dev/null ; then
            if [ $1 -gt 0 ]; then
                timer $1 # Send argument $1 to the function.
            else
                usage
                exit 1
            fi
        else
            case $1 in
                "i") interval;;
                "r") interval reverse;;
                "p") pomodoro;;
                "h") help;;
                "v") version;;
                *)  usage
                    exit 1
                ;;
            esac
        fi
        ;;
    2)
        # Check if $1 is i and $2 is integer.
        if [ "$1" = "i" ] && echo "$2" | grep -E '[[:digit:]]+' ; then
            if [ $2 -gt 0 ]; then # Check if integer is more than 0.
                interval "$2" # Send argument $2 to the function.
            else
                usage
                exit 1
            fi
        # Check if $1 is r and $2 is integer.
        elif [ "$1" = "r" ] && echo "$2" | grep -E '[[:digit:]]+' ; then
            if [ $2 -gt 0 ]; then # Check if integer is more than 0.
                interval reverse "$2" # Send argument reverse and $2 to the function.
            else
                usage
                exit 1
            fi
        else
            usage
            exit 1
        fi
        ;;
    *)  usage
        exit 1
        ;;
esac
